import{_ as a,o as p,c as o,a as s,d as n,b as e}from"./app--ias0FLC.js";const t={},c=s("p",null,"有效单词 需要满足以下几个条件：",-1),l=s("p",null,[n("至少 包含 3 个字符。"),s("br"),n(" 由数字 0-9 和英文大小写字母组成。（不必包含所有这类字符。）"),s("br"),n(" 至少 包含一个 元音字母 。"),s("br"),n(" 至少 包含一个 辅音字母 。"),s("br"),n(" 给你一个字符串 word 。如果 word 是一个有效单词，则返回 true ，否则返回 false 。")],-1),i=s("div",{class:"custom-container tip"},[s("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[s("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[s("circle",{cx:"12",cy:"12",r:"9"}),s("path",{d:"M12 8h.01"}),s("path",{d:"M11 12h1v4h1"})])]),s("p",{class:"custom-container-title"},"TIP"),s("p",null,"根据题意遍历检查即可")],-1),r=e(`<p>实现code：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">bool</span> <span class="token function">isValid</span><span class="token punctuation">(</span>string word<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">bool</span> hasY <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> hasF <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> s <span class="token operator">:</span> word<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token char">&#39;@&#39;</span> <span class="token operator">||</span> s <span class="token operator">==</span> <span class="token char">&#39;#&#39;</span> <span class="token operator">||</span> s <span class="token operator">==</span> <span class="token char">&#39;$&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token char">&#39;0&#39;</span> <span class="token operator">&lt;=</span> s <span class="token operator">&amp;&amp;</span> s <span class="token operator">&lt;=</span> <span class="token char">&#39;9&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">auto</span> m <span class="token operator">=</span> <span class="token function">tolower</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> <span class="token char">&#39;a&#39;</span> <span class="token operator">||</span> m <span class="token operator">==</span> <span class="token char">&#39;e&#39;</span> <span class="token operator">||</span> m <span class="token operator">==</span> <span class="token char">&#39;i&#39;</span> <span class="token operator">||</span> m <span class="token operator">==</span> <span class="token char">&#39;o&#39;</span> <span class="token operator">||</span> m <span class="token operator">==</span> <span class="token char">&#39;u&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        hasY <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        hasF <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> hasF <span class="token operator">&amp;&amp;</span> hasY<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),u=[c,l,i,r];function k(d,v){return p(),o("div",null,u)}const b=a(t,[["render",k],["__file","100284.html.vue"]]);export{b as default};
