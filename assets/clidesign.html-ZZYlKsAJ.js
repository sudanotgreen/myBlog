import{_ as n,o as s,c as a,b as e}from"./app--ias0FLC.js";const t="/myBlog/assets/image1-sFHRvSAL.png",o="/myBlog/assets/image2-Nq53DrB_.png",p={},i=e('<h1 id="脚手架" tabindex="-1"><a class="header-anchor" href="#脚手架" aria-hidden="true">#</a> 脚手架</h1><p>创建项目+通用代码（埋点代码、集成axios、组件库等），git操作+clean code检查，构建+发布<br> 目的：自动化（项目创建等）、标准化（埋点、组件库等）、数据化（研发过程量化，优化流程与时间）</p><h2 id="脚手架原理" tabindex="-1"><a class="header-anchor" href="#脚手架原理" aria-hidden="true">#</a> 脚手架原理</h2><p>一个常见的cmd命令：<code>vue create myBlog</code>，实际场景往往更复杂，比如已经存在同名目录或文件，就需要 <code>vue create myBlog --force</code>，上述命令中<code>vue</code>主命令，<code>create</code>是cammand，<code>myBlog</code>是cammand参数，<code>force</code>是options。<br> 在环境变量中找到vue命令，<code>which vue</code>寻找node安装目录下的bin目录下的vue，这个vue其实只是一个link，对应的是node安装目录下的lib/node_module（全局依赖下的）@vue安装目录下的cli下的bin目录里的vue.js <img src="'+t+'" alt="alt text"> 当然js文件不能直接bash执行，这个vue文件的第一行是<code>#!/user/bin/env node</code>,告诉操作系统执行前在环境变量中寻找node去执行。</p><h2 id="qa-脚手架的本质" tabindex="-1"><a class="header-anchor" href="#qa-脚手架的本质" aria-hidden="true">#</a> QA 脚手架的本质</h2><p>脚手架的本质是一个客户端，因为操作依赖node，而node是一个客户端也是一个可执行文件，和安装的软件没有区别。</p><h2 id="qa-如何创建可执行别名" tabindex="-1"><a class="header-anchor" href="#qa-如何创建可执行别名" aria-hidden="true">#</a> QA 如何创建可执行别名</h2><ol><li>软连接至可执行文件</li></ol><h2 id="qa-执行流程图" tabindex="-1"><a class="header-anchor" href="#qa-执行流程图" aria-hidden="true">#</a> QA 执行流程图</h2><p><img src="'+o+`" alt="alt text"></p><h1 id="脚手架开发流程" tabindex="-1"><a class="header-anchor" href="#脚手架开发流程" aria-hidden="true">#</a> 脚手架开发流程</h1><ul><li>创建npm项目</li><li>创建脚手架入口文件，文件的第一行是<code>#!/user/bin/env node</code></li><li>配置packag.json，添加bin属性</li><li>编写代码</li><li>发布npm</li><li>难点- 命令注册、参数解析、命令行交互、日志打印、文件处理</li></ul><h1 id="demo" tabindex="-1"><a class="header-anchor" href="#demo" aria-hidden="true">#</a> demo</h1><p>package.json</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;soda-cli-demo&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;index.js&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;bin&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;soda&quot;</span><span class="token operator">:</span> <span class="token string">&quot;bin/index.js&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;license&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ISC&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>index.js</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token hashbang comment">#!/usr/bin/env node</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;welcome myCli？？？&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 注册命令</span>
<span class="token keyword">const</span> argv <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;process&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>argv

<span class="token keyword">let</span> command <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">==</span> <span class="token string">&#39;init&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;init start&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>command<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;--&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> command<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">const</span> globalOption <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">--|-</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>globalOption<span class="token punctuation">)</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>globalOption <span class="token operator">==</span> <span class="token string">&#39;v&#39;</span> <span class="token operator">||</span> globalOption <span class="token operator">==</span> <span class="token string">&#39;version&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1.0.0&#39;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;unknow command&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 参数</span>
<span class="token keyword">const</span> options <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>npm login</code>之后<code>npm publish</code>,<code>npm install</code>之后即可使用soda命令<br> 调试：<code>npm link</code>或者在项目的上一层<code>npm install\`\`会默认连接至该项目。 多包调试时，多个包均</code>npm link\`\`\`, 然后手动更改主包的dependences进行连接使用。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>连接本地脚手架添加命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span>  cli
<span class="token function">npm</span> <span class="token function">link</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>连接本地库文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> lib
<span class="token function">npm</span> <span class="token function">link</span>
<span class="token builtin class-name">cd</span> cli
<span class="token function">npm</span> <span class="token function">link</span> lib
// 修改cli的dependences
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>真实使用线上lib调试</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> lib
<span class="token function">npm</span> unlink
<span class="token builtin class-name">cd</span> cli
<span class="token function">npm</span> unlink lib
<span class="token function">rm</span> <span class="token parameter variable">-rf</span> node_module
<span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-s</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>npm link lib</code>当前项目下node_module库文件连接node全局的node_module<br><code>npm link</code>将当前项目连接到node全局node_module中作为一个库文件，并解析bin创建可执行文件 <code>npm unlink lib</code>将当前项目中的库文件全局依赖移除</p>`,26),c=[i];function l(r,u){return s(),a("div",null,c)}const k=n(p,[["render",l],["__file","clidesign.html.vue"]]);export{k as default};
