import{_ as e,r as p,o,c,a as n,d as s,e as i,b as a}from"./app--ias0FLC.js";const l={},u=a(`<h2 id="概览" tabindex="-1"><a class="header-anchor" href="#概览" aria-hidden="true">#</a> 概览</h2><p>在前后端分离之后，我们所说的路由更多的是由前端实现的前端路由。前端路由相比于服务端路由最显著的特点是可以在无刷新的情况下进行页面、组件的切换。基于前端路由，诞生了单页应用开发模式 SPA 被使用于react， vue等主流框架。对于SPA应用的前端开发者而言，路由本质是 URL 到不同页面或者组件之间的映射。<br> 目前，实现路由的方式主要是 <em>hash路由</em> 与 <em>history路由</em> ，两者最直接的区别就是在 URL 中是否包含 # ，这两种实现方式各有其优势和局限性。</p><h2 id="url" tabindex="-1"><a class="header-anchor" href="#url" aria-hidden="true">#</a> URL</h2><p>以我们最常见url举例</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> https://myblogs.com:8080/Offer/chrome?name=otterLab#hello
 \\___/   \\_______________/\\___________/\\___________/ \\___/
   |              |             |             |         |
 scheme        authority       path         query      hash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>url主要包含包含五个部分，协议，主机，路径，query参数，哈希。在上文方法中 <em>hash路由</em> 主要依靠哈希部分， <em>history路由</em> 主要依赖path部分进行区分和匹配页面。</p><h2 id="hash路由" tabindex="-1"><a class="header-anchor" href="#hash路由" aria-hidden="true">#</a> hash路由</h2><p>hash 原本是用来标识次级资源，常用的a标签结合id即可实现hash的锚点跳转</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;h2 id=&quot;mubiao&quot;&gt;目标位置&lt;/h2&gt;
&lt;a name=&quot;mubiao&quot;&gt;&lt;/a&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>hash值变化时有不会触发网页重载但会改变浏览器的历史记录。同时修改hash会触发浏览器的 <em>onhashchange</em> 事件,基于这个特点，可实现基于 Hash 的前端路由。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 监听hash变化回调函数</span>
<span class="token keyword">function</span> <span class="token function">onHashChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 解析 hash</span>
  <span class="token keyword">let</span> hash <span class="token operator">=</span> location<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^#</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 获取query参数</span>
  <span class="token keyword">let</span> search <span class="token operator">=</span> location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;?&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 切换页面内容</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&quot;home&quot;</span><span class="token operator">:</span>
      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello home </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>search<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string">&quot;blogs&quot;</span><span class="token operator">:</span>
      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello blogs </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>search<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;hashchange&quot;</span><span class="token punctuation">,</span> onHashChange<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码在浏览器控制台输入即可执行测试。</p>`,12),r=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"hash模式有着极佳的兼容性也无需后端配置，但是可能和锚点功能冲突并且对 SEO 不友好。")],-1),d=n("h2",{id:"history模式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#history模式","aria-hidden":"true"},"#"),s(" history模式")],-1),k={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/History",target:"_blank",rel:"noopener noreferrer"},h=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("核心主要依赖两个方法和一个事件："),n("br"),s(" 方法(用于操作浏览器的历史记录)"),n("br"),s(" history.pushState：将给定的 Data 添加到当前标签页的历史记录栈中。"),n("br"),s(" history.replaceState：将给定的 Data 更新到历史记录栈中最新的一条记录中。"),n("br"),s(" 事件(用于监听历史记录的切换)"),n("br"),s(" popstate：监听历史记录的变化。")])],-1),v=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">onHistoryChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> pathname<span class="token punctuation">,</span> search <span class="token punctuation">}</span> <span class="token operator">=</span> location<span class="token punctuation">;</span>

  <span class="token keyword">switch</span> <span class="token punctuation">(</span>pathname<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&quot;/blogs&quot;</span><span class="token operator">:</span>
      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>search<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;?&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello World</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">pushState</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">onHistoryChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">pushState</span><span class="token punctuation">(</span><span class="token string">&quot;/blogs?name=sodanotgreen&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;popstate&quot;</span><span class="token punctuation">,</span> onHistoryChange<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码在浏览器控制台输入即可执行测试。</p>`,2),m=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"History 模式具有前端监控、 SEO 相对友好的优势，但是兼容性稍弱同时需要后端额外配置，将各 path 均指向同一个 HTML 。")],-1),b=n("h2",{id:"总结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#总结","aria-hidden":"true"},"#"),s(" 总结")],-1),g=n("p",null,"前端路由是前后端分离的产物，对比服务端路由，具有无刷新，减轻服务端压力的优势但却使得初次加载耗时长、 SEO 效果变差。",-1);function _(w,y){const t=p("ExternalLinkIcon");return o(),c("div",null,[u,r,d,n("p",null,[s("History 模式通过浏览器原生提供的 History API 来实现的路由功能。"),n("a",k,[s("MDN参考连接"),i(t)])]),h,v,m,b,g])}const f=e(l,[["render",_],["__file","router.html.vue"]]);export{f as default};
